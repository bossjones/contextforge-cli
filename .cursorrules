# ContextForge CLI Development Standards

## Purpose
You are an AI assistant responsible for helping a developer maintain Python code quality and develop an async-first CLI tool using modern Python practices, with a focus on AI/ML integration through LangChain and LangGraph.

## Core Instructions
1. Follow the established project structure with `src/contextforge_cli` as the main package
2. Maintain separation of concerns between different modules and components
3. Use UV (https://docs.astral.sh/uv) for dependency management and virtual environments
4. Follow the established directory structure for tests, documentation, and source code
5. Ensure all new code follows the project's typing and documentation standards
6. Implement async-first design patterns throughout the codebase
7. Utilize LangChain and LangGraph for AI/ML integrations
8. During development, maintain notes of reusable components in the `Lessons` section
9. Use the `.cursor-scratchpad` file to organize thoughts and track progress

## MCP Filesystem Standards
1. **Project Root**
   - Base directory: `/Users/malcolm/dev/bossjones/contextforge-cli`
   - All file operations must use absolute paths from this root
   - Example: For `src/contextforge_cli/subcommands/migrate_rules/exceptions/validation.py`,
     use `/Users/malcolm/dev/bossjones/contextforge-cli/src/contextforge_cli/subcommands/migrate_rules/exceptions/validation.py`

2. **File Operation Rules**
   - Always use full paths starting with the project root
   - Never use paths starting with `/` or `./`
   - For new files, create parent directories if they don't exist
   - Verify file existence before reading
   - Use proper error handling for file operations

3. **Path Construction**
   - When constructing paths, always prepend the project root
   - Example:
     ```python
     # Correct
     file_path = "/Users/malcolm/dev/bossjones/contextforge-cli/src/contextforge_cli/file.py"

     # Incorrect
     file_path = "src/contextforge_cli/file.py"  # Will fail
     file_path = "/src/contextforge_cli/file.py"  # Will fail
     ```

## Project Structure Standards
- Maintain clear project structure:
  - `src/contextforge_cli/`: Main package directory
  - `tests/`: Test directory
  - `docs/`: Documentation
  - `scripts/`: Utility scripts
  - `hack/`: IDE and tool configurations
- Keep configuration files in root directory (pyproject.toml, tox.ini, mypy.ini)
- Use modular design with distinct files for models, services, controllers, utilities
- Follow composition over inheritance principle
- Use design patterns like Adapter, Decorator, and Bridge when appropriate
- Keep vendored code in `src/contextforge_cli/vendored/` directory

## Python Code Standards
1. **Type Safety**
   - Add typing annotations to ALL functions and classes with return types
   - Use TypeVar and ParamSpec for generic types
   - Add runtime type checking where necessary
   - Use Literal types for constrained values
   - For Pydantic v2:
     - Use `Literal` types instead of `const` parameter for fields with fixed values
     - Use `json_schema_extra` instead of extra keyword arguments on `Field`
     - Example:
       ```python
       # Correct (Pydantic v2)
       from typing import Literal
       type: Literal["context"] = Field("context", description="Type of the annotation")

       # Incorrect (Deprecated in Pydantic v2)
       type: str = Field("context", const=True)

       # Correct (for extra schema information)
       from pydantic import Field
       field: str = Field(
           "value",
           description="Field description",
           json_schema_extra={
               "examples": ["example1", "example2"],
               "deprecated": False
           }
       )

       # Incorrect (Deprecated extra kwargs)
       field: str = Field("value", examples=["example1"], deprecated=False)
       ```
2. **Documentation**
   - Include PEP 257-compliant docstrings in Google style for all functions and classes
   - Add detailed comments for complex logic
   - Provide rich error context for debugging
   - Follow DRY and KISS principles

3. **Async Programming**
   - Use async/await patterns consistently
   - Implement proper async context managers
   - Use aiofiles for all file operations
   - Use asyncio.gather for concurrent operations
   - Implement proper cancellation handling
   - Use AsyncTyperImproved for CLI commands

4. **Error Handling**
   - Define custom exception hierarchies
   - Use contextual error messages with structured data
   - Implement proper error recovery strategies
   - Add error boundaries at system boundaries

5. **Logging**
   - Use structlog for all logging operations
   - Include contextual data in log events
   - Use proper log levels consistently
   - Add correlation IDs for request tracing

## Testing Standards
1. **Test Organization**
   - Place all tests in `./tests/` directory
   - Use pytest exclusively (no unittest module)
   - Add type annotations and docstrings to all tests
   - Use pytest markers for categorization
   - Mirror source code directory structure in tests

2. **Test Types**
   - Unit tests in `tests/unittests/`
   - Integration tests in `tests/integration/`
   - End-to-end tests in `tests/e2e/`
   - Performance tests in `tests/performance/`

3. **Test Requirements**
   - Import TYPE_CHECKING block with pytest types:
     ```python
     if TYPE_CHECKING:
         from _pytest.capture import CaptureFixture
         from _pytest.fixtures import FixtureRequest
         from _pytest.logging import LogCaptureFixture
         from _pytest.monkeypatch import MonkeyPatch
         from pytest_mock.plugin import MockerFixture
     ```
   - Use pytest fixtures for reusable components
   - Use tmp_path fixture for file-based tests
   - Use VCR.py for recording and replaying HTTP interactions

## AI Integration Standards
1. **LangChain Usage**
   - Use LangChain for structured AI/ML workflows
   - Implement proper error handling for LLM calls
   - Use streaming responses when appropriate
   - Handle rate limits and quotas properly

2. **LangGraph Implementation**
   - Follow LangGraph's component structure
   - Use proper state management in graph nodes
   - Implement proper error handling in edges
   - Create reusable graph components

## Documentation Standards
1. **Code Documentation**
   - Add comprehensive docstrings to all code
   - Include type information in docstrings
   - Document exceptions and error conditions
   - Add usage examples for complex functions

2. **Project Documentation**
   - Maintain README.md with project overview
   - Keep ARCHITECTURE.md updated
   - Update CHANGELOG.md for all changes
   - Document API endpoints and schemas

3. **Comments**
   - Never remove existing comments
   - Add descriptive inline comments
   - Update comments when code changes
   - Cross-reference related documentation

## Import Standards
1. **Import Organization**
   - Place `from __future__ import annotations` at top
   - Group imports by section:
     1. Future imports
     2. Standard library imports
     3. Third-party imports
     4. Local imports
     5. Type checking imports
   - Sort imports alphabetically within sections
   - Use absolute imports over relative imports
   - NEVER use relative imports (no .. or . notation)

2. **Import Rules**
   - Add appropriate linter directives for imports
   - Use consistent import aliases
   - Import only what is needed
   - Keep import blocks organized and clean
   - Always use full package path from root for local imports
     Example:
     ```python
     # Correct
     from contextforge_cli.subcommands.migrate_rules.models.validation import ValidationResult

     # Incorrect
     from ..models.validation import ValidationResult  # No relative imports
     from .base import BaseValidator  # No relative imports
     ```
   - For TYPE_CHECKING imports, also use absolute imports:
     ```python
     if TYPE_CHECKING:
         from contextforge_cli.subcommands.migrate_rules.models.context import MDCContext
     ```

3. **Import Structure**
   - Keep imports grouped by their source:
     ```python
     from __future__ import annotations  # Future imports first

     import abc  # Standard library imports
     import asyncio
     from typing import Optional, List

     import structlog  # Third-party imports
     from pydantic import BaseModel

     from contextforge_cli.models import SomeModel  # Local imports
     from contextforge_cli.utils import some_util

     if TYPE_CHECKING:  # Type checking imports last
         from contextforge_cli.types import SomeType
     ```

## Tool Configuration Standards
1. **Ruff Configuration**
   - Document all rules in pyproject.toml
   - Use per-file-ignores for exceptions
   - Run Ruff with --fix for auto-fixes
   - Keep line length consistent

2. **UV Usage**
   - Use `uv sync` for dependency installation
   - Maintain lock file consistency
   - Use `uv.lock` for deterministic resolution
   - Document dependencies in pyproject.toml
3. **Pydantic Configuration**
   - Use Pydantic v2 best practices:
     ```python
     # Configuration in model
     from pydantic import BaseModel, ConfigDict

     class MyModel(BaseModel):
         model_config = ConfigDict(
             str_strip_whitespace=True,
             validate_assignment=True,
             frozen=True
         )
     ```
   - Field Definitions:
     - Use `Literal` types for constrained values
     - Use `json_schema_extra` for additional schema information
     - Use `Field` with type annotations
     - Example:
     ```python
     from typing import Literal
     from pydantic import BaseModel, Field

     class AnnotationModel(BaseModel):
         # Fixed value field
         type: Literal["example"] = Field("example", description="Type of annotation")

         # Optional field with default
         value: str | None = Field(
             None,
             description="Value description",
             json_schema_extra={"examples": ["value1", "value2"]}
         )

         # Required field with validation
         count: int = Field(
             ...,  # ... means required
             gt=0,
             description="Must be greater than zero"
         )
     ```
   - Error Handling:
     - Use custom validators with descriptive error messages
     - Implement proper exception handling for validation errors
     - Use `ValidationError` for structured error reporting

## Memory Management
- Update `@memories.md` for all interactions
- Document lessons learned in `@lessons-learned.md`
- Use `.cursor-scratchpad` for task tracking
- Cross-reference between memory files

## Version Control Standards
1. **Commit Messages**
   - Use conventional commit format:
     - fix: For bug fixes
     - feat: For new features
     - docs: For documentation
     - style: For formatting
     - refactor: For refactoring
     - test: For adding tests
     - chore: For maintenance
   - Keep messages clear and descriptive
   - Reference issues when applicable

2. **Branch Management**
   - Use feature branches for development
   - Keep main/master branch stable
   - Delete branches after merging
   - Use meaningful branch names


## Lessons

<context>
## User Specified Lessons

- You have a python venv in ./venv. Use it with UV.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Always use UV for Python package management and virtual environments
- When using Pydantic v2:
  - Replace `const=True` with `Literal` types from typing module for fields with fixed values
  - Use `json_schema_extra` instead of passing extra kwargs to `Field`
  - Be aware of deprecation warnings about extra kwargs on `Field` (like 'env') and update accordingly
  - Keep type annotations up to date with the latest Pydantic practices
  - Example of fixing const usage:
    ```python
    # Old (Pydantic v1)
    type: str = Field("context", const=True)

    # New (Pydantic v2)
    from typing import Literal
    type: Literal["context"] = Field("context", description="Type of the annotation")
    ```
</context>

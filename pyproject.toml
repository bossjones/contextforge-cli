[project]
name = "contextforge-cli"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Malcolm Jones", email = "bossjones@theblacktonystark.com" }
]
requires-python = ">=3.12"
dependencies = [
    "aiodebug>=2.3.0",
    "aiofile>=3.9.0",
    "aiofiles>=24.1.0",
    "aiohttp>=3.11.12",
    "aiomonitor>=0.7.1",
    "aioprometheus[starlette]>=23.12.0",
    "aiopytesseract>=0.14.0",
    "aiosql>=13.2",
    "aiosqlite>=0.20.0",
    "asyncer>=0.0.8",
    "attrs>=25.1.0",
    "babel>=2.17.0",
    "beautifulsoup4>=4.13.3",
    "better-exceptions>=0.3.3",
    "bpython>=0.25",
    "codetiming>=1.4.0",
    "dask>=2025.1.0",
    "duckduckgo-search>=7.3.2",
    "fastapi[all]>=0.115.8",
    "files-to-prompt>=0.4",
    "gitignore-parser>=0.1.11",
    "grandalf>=0.8",
    "httpx>=0.28.1",
    "imageio>=2.37.0",
    "imutils>=0.5.4",
    "langchain>=0.3.17",
    "langchain-anthropic>=0.3.6",
    "langchain-chroma>=0.2.1",
    "langchain-community>=0.3.16",
    "langchain-core>=0.3.33",
    "langchain-fireworks>=0.2.7",
    "langchain-google-genai>=2.0.9",
    "langchain-groq>=0.2.4",
    "langchain-milvus>=0.1.8",
    "langchain-openai>=0.3.3",
    "langchainhub>=0.1.21",
    "langgraph>=0.2.69",
    "langgraph-checkpoint-sqlite>=2.0.3",
    "langgraph-cli[inmem]>=0.1.70",
    "langgraph-sdk>=0.1.51",
    "langsmith>=0.3.6",
    "lazy-object-proxy>=1.10.0",
    "llm>=0.21",
    "llm-claude-3>=0.11",
    "llm-clip>=0.1",
    "llm-cmd>=0.2a0",
    "llm-gemini>=0.10",
    "llm-jq>=0.1.1",
    "llm-perplexity>=2025.1.1",
    "llm-python>=0.1",
    "llm-replicate>=0.3.1",
    "llm-sentence-transformers>=0.2",
    "logging-tree>=1.10",
    "lxml>=5.3.0",
    "marimo>=0.11.0",
    "markdown>=3.7",
    "matplotlib>=3.10.0",
    "mcp[cli]>=1.2.1",
    "md2pdf>=1.0.1",
    "msgspec>=0.19.0",
    "pandas>=2.2.3",
    "pdf2image>=1.17.0",
    "playwright>=1.50.0",
    "psutil>=6.1.1",
    "pyarrow>=19.0.0",
    "pydantic-settings>=2.7.1",
    "pydantic[email]>=2.10.6",
    "pyinstrument>=5.0.1",
    "pypdf>=5.2.0",
    "pypdf2>=3.0.1",
    "pysnooper>=1.2.1",
    "pytesseract>=0.3.13",
    "python-decouple>=3.8",
    "python-docx>=1.1.2",
    "python-dotenv>=1.0.1",
    "python-json-logger>=3.2.1",
    "python-levenshtein>=0.26.1",
    "python-slugify>=8.0.4",
    "pytz>=2025.1",
    "rank-bm25>=0.2.2",
    "rapidfuzz>=3.12.1",
    "rapidocr-onnxruntime>=1.4.4",
    "requests>=2.32.3",
    "requests-toolbelt>=1.0.0",
    "rich>=13.9.4",
    "scenedetect[opencv]>=0.6.5.2",
    "sentence-transformers>=3.4.1",
    "sentencepiece>=0.2.0",
    "strip-tags>=0.5.1",
    "structlog>=24.4.0",
    "symbex>=1.4",
    "tavily-python>=0.5.0",
    "toolong>=1.5.0",
    "torchvision>=0.21.0",
    "trustcall>=0.0.34",
    "ttok>=0.3",
    "typing-extensions>=4.12.2",
    "uritools>=4.0.3",
    "watchdog[watchmedo]>=6.0.0",
    "webcolors>=24.11.1",
]

[project.scripts]
contextforge-cli = "contextforge_cli:main"
cfctl = 'contextforge_cli.cli:entry'
contextforgectl = 'contextforge_cli.cli:entry'

[build-system]
requires = ["setuptools>=61"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "coverage[toml]>=7.6.10",
    "debugpy>=1.8.12",
    "mock>=5.1.0",
    "pre-commit>=4.1.0",
    "pydocstyle>=6.3.0",
    "pylint-pydantic>=0.3.5",
    "pyright>=1.1.393",
    "pytest>=8.3.4",
    "pytest-aiohttp>=1.1.0",
    "pytest-aioresponses>=0.3.0",
    "pytest-asyncio>=0.25.3",
    "pytest-clarity>=1.0.1",
    "pytest-cov>=6.0.0",
    "pytest-freezegun",
    "pytest-httpx>=0.35.0",
    "pytest-ignore-flaky>=2.2.1",
    "pytest-memray>=1.7.0",
    "pytest-mock>=3.14.0",
    "pytest-recording>=0.13.2",
    "pytest-retry>=1.7.0",
    "pytest-skip-slow>=0.0.5",
    "pytest-skipuntil>=0.2.0",
    "pytest-structlog>=1.1",
    "pytest-sugar>=1.0.0",
    "pyupgrade>=3.19.1",
    "requests-mock>=1.12.1",
    "respx>=0.22.0",
    "ruff>=0.9.4",
    "tox-uv>=1.22.1",
    "types-aiofiles>=24.1.0.20241221",
    "types-beautifulsoup4>=4.12.0.20250204",
    "types-mock>=5.1.0.20240425",
    "types-requests>=2.32.0.20241016",
    "validate-pyproject[all,store]>=0.23",
]

# --- AI-CONTEXT-START ---
[tool.codespell]
skip = '.git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples,templates,*.trig'
# Ignore latin etc
ignore-regex = '.*(Stati Uniti|Tense=Pres).*'
# whats is a typo but used frequently in queries so kept as is
# aapply - async apply
# unsecure - typo but part of API, decided to not bother for now
ignore-words-list = 'momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate,aadd,symbl,precesses,accademia,nin,cann'

[tool.ruff]
extend-include = ["*.ipynb"]
extend-exclude = [
    "docs/docs/expression_language/why.ipynb", # TODO: look into why linter errors
]

[tool.ruff.lint]
select = [
  "D", # pydocstyle
  "E",  # pycodestyle
  "F",  # Pyflakes
  "UP", # pyupgrade
  "B",  # flake8-bugbear
  "I",  # isort
]
ignore = [
  "B027", # Unused variable - acceptable in minimal examples
  "B007",  # Loop control variable not used - acceptable in minimal examples
  "B008", # function-call-in-default-argument Checks for function calls in default function arguments.
  "B018",  # Useless expression - allowed for illustrative code snippets
  "B034",  # Prefer `X | Y` over `Union` - disable for Python <3.10 compatibility
  "B904",  # Require `raise...from` - relax for simple error demonstrations
  "D417", # Relax the convention by _not_ requiring documentation for every function parameter.
  "E402",  # Module import not at top - needed for notebook-style documentation
  "E501", # Checks for lines that exceed the specified maximum character length.
  "E721",  # Allow direct type comparison (`type(x) is int`) for clarity in examples
  "E722",  # Permit bare except: for concise error handling demonstrations
  "E731",  # Allow lambda assignment for short code samples
  "E741",  # Allow ambiguous names (I/O/l) in compact examples
  "F401",  # Allow unused imports in API documentation examples
  "F811",  # Allow redefinition for independent code cells
  "F821",  # Allow undefined names in partial code snippets
  "F841",  # Allow unused variables in explanatory code fragments
  "UP006", # Checks for the use of generics that can be replaced with standard library variants based on PEP 585.
  "UP007", # non-pep604-annotation-union (UP007) Check for type annotations that can be rewritten based on PEP 604 syntax.
  "UP035", # We actually do want to import from typing_extensions
  "UP038",  # Accept `isinstance(X, (Y, Z))` for backwards compatibility
]
pydocstyle = { convention = "google" }

[tool.ruff.lint.per-file-ignores]
"**/{cookbook,docs}/*" = [
    "E402", # allow imports to appear anywhere in docs
    "F401", # allow "imported but unused" example code
    "F811", # allow re-importing the same module, so that cells can stay independent
    "F841", # allow assignments to variables that are never read -- it's example code

]
"!libs/langchain/langchain/model_laboratory.py"=["D"]

# These files were failing the listed rules at the time ruff was adopted for notebooks.
# Don't require them to change at once, though we should look into them eventually.
"cookbook/gymnasium_agent_simulation.ipynb" = ["F821"]
"docs/docs/integrations/document_loaders/tensorflow_datasets.ipynb" = ["F821"]
"tests/evaluation/__init__.py" = ["E501"]
"tests/unit_tests/test_client.py" = ["E501"]
"tests/*" = ["D", "UP"]
"bench/*" = ["D", "UP", "T"]
"docs/*" = ["T", "D"]


[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
asyncio_mode = "auto"

structlog_keep=["add_logger_name", "StackInfoRenderer", "TimeStamper", "ConsoleRenderer"]
testpaths = ["tests"]

filterwarnings = [
    'ignore:configuration option "asyncio_default_fixture_loop_scope" is unset',
    "ignore::DeprecationWarning:.venv.*:",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20:.venv.*:",
    "ignore::DeprecationWarning:discord.*:",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20:pydantic.*:",
    "ignore::pydantic.warnings.PydanticDeprecatedSince20:fireworks.*:",
    "ignore::DeprecationWarning:audioop:",
    "default::DeprecationWarning:democracy_exe.*:",
    "default::pydantic.warnings.PydanticDeprecatedSince20:democracy_exe.*:",
]
# retries = 5
# retry_delay = 0.5
# retry_delay = 30
pythonpath = "."
# pythonpath = [
#   "src"
# ]
asyncio_default_fixture_loop_scope = "function"
addopts = [
    # Print runtimes of the slowest tests.
    '--strict-markers',
    '--strict-config',
    '-vv',
    '--durations=10',
    '--durations-min=0.05',
    '--junitxml=junit/test-results.xml',
    '--cov-report=annotate:cov_annotate',
]

# ###################################################################################
# # enable live logging when needed (very useful when debugging evals)
# ###################################################################################
log_cli = false
log_cli_level = "DEBUG"
# log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
# log_cli_format = "%(asctime)s [%(levelname)8s] %(module)s.%(funcName)s:%(lineno)d - %(message)s"
log_cli_format = "%(asctime)s [%(levelname)8s] [%(threadName)s] %(name)s - %(module)s.%(funcName)s (%(filename)s:%(lineno)d) - %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Enable live logging to a file when needed (very useful when debugging evals)
log_file = "pytest-accuracy-debug.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"

# markers=["basic", "filetree", "suites", "markers", "parametrization", "buildmeta"]
# allows you to conditionally call only a subset of pytest baased on the marker provided
markers = [
    "cogs: marks tests that run code that utilizes the cogs module (deselect with '-m \"not cogs\"')",
    "configonly: marks tests that run code that utilizes the config module (deselect with '-m \"not configonly\"')",
    "e2e: marks tests dealing with e2e testing (deselect with '-m \"not e2e\"')",
    "evals: marks tests as evals (run with '-m evals')",
    "fast: marks tests as fast (run with '-m fast')",
    "httpclientonly: marks tests that run code that utilizes the http_client module (deselect with '-m \"not httpclientonly\"')",
    "imgops: marks tests as imgops (run with '-m imgops')",
    "integration: marks tests dealing with integration testing (deselect with '-m \"not integration\"')",
    "onboardingonly: marks tests that run code that utilizes the new_dev_onboarding_tool module (deselect with '-m \"not onboardingonly\"')",
    "utilsonly: marks tests that run code that utilizes any utils module (deselect with '-m \"not utilsonly\"')",
    "retryonly: marks tests that run code that utilizes the retry module (deselect with '-m \"not retryonly\"')",
    "skip_in_parallel: marks tests that should be run in serial only (deselect with '-m \"not skip_in_parallel\"')",
    "slow: marks tests as slow (run with '-m slow')",
    "toolonly: marks tests that run code that utilizes a Custom Langchain tool module in the tools directory (deselect with '-m \"not toolonly\"')",
    "unittest: marks tests dealing with unittest (deselect with '-m \"not unittest\"')",
    "vectorstoronly: marks tests that run code that utilizes the flex_vector_store_tool module (deselect with '-m \"not vectorstoronly\"')",
    "visiontoolonly: marks tests that run code that utilizes vision_tool.py (deselect with '-m \"not visiontoolonly\"')",
    "webpagetoolonly: marks tests that run code that utilizes the fetch_webpage_tool module (deselect with '-m \"not webpagetoolonly\"')",
    "vcronly: marks tests that run code that utilizes the vcr module (deselect with '-m \"not vcronly\"')",
    "vcrcanary: marks tests that run code that utilizes the vcr test canary module (deselect with '-m \"not vcrcanary\"')",
    "pgvectoronly: marks tests that run code that utilizes the pgvector module (deselect with '-m \"not pgvectoronly\"')",
    "services: marks tests that run code that belongs to the services module  (deselect with '-m \"not services\"')",
    "slower: marks tests that run code that belongs to the slower calls at end of pytest run module  (deselect with '-m \"not slower\"')",
    "discordonly: marks tests that run code that belongs to the discordonly calls at end of pytest run module  (deselect with '-m \"not discordonly\"')",
    "cursorgenerated: marks tests that are cursor generated (deselect with '-m \"not cursorgenerated\"')",
    "aidergenerated: marks tests that are aider generated (deselect with '-m \"not aidergenerated\"')",
    "asynciotyper: marks tests that are asyncio typer generated (deselect with '-m \"not asynciotyper\"')",
    "cli: marks tests that are cli generated (deselect with '-m \"not cli\"')",
    "dropboxonly: marks tests that run code that utilizes the dropbox module (deselect with '-m \"not dropboxonly\"')",
    "gallerydlonly: marks tests that run code that utilizes the gallery-dl module (deselect with '-m \"not gallerydlonly\"')",
    "logsonly: marks tests that run code that utilizes the logs module (deselect with '-m \"not logsonly\"')",
    "chatbotonly: marks tests that run code that utilizes the chatbot module (deselect with '-m \"not chatbotonly\"')",
    "agenticonly: marks tests that run code that utilizes the agentic module (deselect with '-m \"not agenticonly\"')",
]

[tool.uv.sources]
pytest-freezegun = { git = "https://github.com/bossjones/pytest-freezegun" }
# --- AI-CONTEXT-END ---
